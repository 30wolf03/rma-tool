import time
import base64
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QLineEdit, 
                            QPushButton, QFormLayout, QTextEdit, QMessageBox,
                            QInputDialog, QComboBox, QLabel, QHBoxLayout)

from zendesk_api import get_customer_email
from billbee_api import BillbeeAPI
from dhl_api import DHLAPI as DHL_API_CLASS


class DHLLabelGenerator(QMainWindow):
    def __init__(self):
        super().__init__()
        # Zugangsdaten (werden später durch KeePass gefüllt)
        self.username = None
        self.password = None
        self.client_id = None
        self.client_secret = None
        self.zendesk_email = None
        self.zendesk_token = None
        self.billing_number = None
        self.bb_api_key = None  # Billbee API Key
        self.bb_api_user = None  # Billbee API User

        # DHLAPI erst bei Bedarf initialisieren
        self.dhl_api = None

        # GUI Setup
        self.setWindowTitle("DHL Label Generator")
        self.setGeometry(100, 100, 600, 400)
        
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)
        form_layout = QFormLayout()

        # Eingabefelder
        self.ticket_nr_input = QLineEdit()
        self.type_dropdown = QComboBox()
        self.type_dropdown.addItems(["Widerruf", "Reparatur"])
        self.name_input = QLineEdit()
        self.street_input = QLineEdit()
        self.house_input = QLineEdit()
        self.additional_info_input = QLineEdit()
        self.postal_input = QLineEdit()
        self.city_input = QLineEdit()
        self.email_input = QLineEdit()
        self.phone_input = QLineEdit()
        self.ref_input = QLineEdit()

        # Ticket Layout
        ticket_layout = QHBoxLayout()
        ticket_layout.addWidget(QLabel("Ticket Nr."))
        ticket_layout.addWidget(self.ticket_nr_input)
        ticket_layout.addWidget(QLabel("Typ"))
        ticket_layout.addWidget(self.type_dropdown)
        email_button = QPushButton("E-Mail Adresse abrufen")
        email_button.clicked.connect(self.get_zendesk_email)
        ticket_layout.addWidget(email_button)
        form_layout.addRow("", ticket_layout)

        # Email Layout
        email_layout = QHBoxLayout()
        email_layout.addWidget(self.email_input)
        address_button = QPushButton("Adresse abrufen")
        address_button.clicked.connect(self.get_billbee_address)
        email_layout.addWidget(address_button)

        # Formular Layout
        form_layout.addRow("Name:", self.name_input)
        form_layout.addRow("Straße:", self.street_input)
        form_layout.addRow("Hausnummer:", self.house_input)
        form_layout.addRow("Zusatz:", self.additional_info_input)
        form_layout.addRow("PLZ:", self.postal_input)
        form_layout.addRow("Stadt:", self.city_input)
        form_layout.addRow("E-Mail:", email_layout)
        form_layout.addRow("Telefon:", self.phone_input)
        form_layout.addRow("Referenz:", self.ref_input)

        # Buttons
        self.generate_button = QPushButton("Label generieren")
        self.generate_button.clicked.connect(self.generate_label)

        # Log-Bereich
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)

        # Layout zusammenbauen
        layout.addLayout(form_layout)
        layout.addWidget(self.generate_button)
        layout.addWidget(self.log_text)

        # Nach dem Layout Setup
        # self.ticket_nr_input.textChanged.connect(self.update_additional_info)
        # self.type_dropdown.currentTextChanged.connect(self.update_additional_info)


    # def update_additional_info(self):
    #     ticket = self.ticket_nr_input.text().strip()
    #     typ = "WR" if self.type_dropdown.currentText() == "Widerruf" else "Rep"
    #     if ticket:
    #         self.additional_info_input.setText(f"{ticket} {typ}")


    def get_zendesk_email(self):
        ticket_id = self.ticket_nr_input.text()
        if ticket_id:
            try:
                email = get_customer_email(ticket_id, self.zendesk_email, self.zendesk_token)
                if email:
                    self.email_input.setText(email)
                    self.log_text.append(f"E-Mail für Ticket {ticket_id} erfolgreich abgerufen")
                else:
                    QMessageBox.warning(self, "Fehler", "E-Mail-Adresse konnte nicht gefunden werden")
            except Exception as e:
                QMessageBox.warning(self, "Fehler", str(e))
                self.log_text.append(f"Fehler beim Abrufen der E-Mail: {str(e)}")
        else:
            QMessageBox.warning(self, "Fehler", "Bitte eine Ticket-Nr. eingeben")

    def get_billbee_address(self):
        if not self.bb_api_key or not self.bb_api_user or not self.bb_api_password:
            QMessageBox.warning(self, "Fehler", "Keine gültigen Billbee-Zugangsdaten vorhanden")
            return
            
        email = self.email_input.text().strip()
        if not email:
            QMessageBox.warning(self, "Fehler", "Bitte eine E-Mail-Adresse eingeben")
            return
            
        try:
            billbee = BillbeeAPI(
                api_key=self.bb_api_key,
                api_user=self.bb_api_user,
                api_password=self.bb_api_password
            )
            address = billbee.get_customer_address(email)
            
            if address:
                # Adressdaten setzen
                self.name_input.setText(f"{address['firstname']} {address['lastname']}")
                self.street_input.setText(address['street'])
                self.house_input.setText(address['housenumber'])
                self.postal_input.setText(address['zipcode'])
                self.city_input.setText(address['city'])
                self.phone_input.setText(address['phone'])
                
                # Firmenzusatz beim Absender setzen falls vorhanden
                if address['company']:
                    self.additional_info_input.setText(address['company'])
                    
                # Ticket + Typ Info nur im Referenzfeld setzen
                ticket = self.ticket_nr_input.text().strip()
                typ = "WR" if self.type_dropdown.currentText() == "Widerruf" else "Rep"
                reference = f"{ticket} {typ}"
                if ticket:
                    self.ref_input.setText(reference)
                
                self.log_text.append("Adressdaten von Billbee erfolgreich geladen")
            else:
                QMessageBox.warning(self, "Fehler", "Keine Kundendaten gefunden")
                
        except Exception as e:
            QMessageBox.warning(self, "Fehler", str(e))
            self.log_text.append(f"Fehler beim Laden der Adressdaten: {str(e)}")


    def generate_label(self, shipment_data):
        try:
            # DHL API initialisieren falls noch nicht geschehen
            if not hasattr(self, 'dhl_api') or self.dhl_api is None:
                self.dhl_api = DHL_API_CLASS(
                    username=self.username,
                    password=self.password,
                    client_id=self.client_id,
                    client_secret=self.client_secret,
                    billing_number=self.billing_number
                )

            # Absenderdaten aus Eingabefeldern lesen
            name = self.name_input.text().strip() or "Max Mustermann"
            street = self.street_input.text().strip() or "Hauptstr."
            house = self.house_input.text().strip() or "1"
            additional_info = self.additional_info_input.text().strip() or "c/o Firma"
            postal = self.postal_input.text().strip() or "10115"
            city = self.city_input.text().strip() or "Berlin"
            email = self.email_input.text().strip() or "max@example.com"
            phone = self.phone_input.text().strip() or "+49 123456789"

            # Ticket-Informationen
            ticket_number = self.ref_input.text().strip()
            ticket_type = "WR" if self.type_dropdown.currentText() == "Widerruf" else "Rep"
            reference = f"{ticket_number} {ticket_type}"

            # Sendungsdaten vorbereiten
            shipment_data = {
                "profile": "STANDARD_GRUPPENPROFIL",
                "shipments": [{
                    "product": "V01PAK",
                    "billingNumber": self.billing_number,
                    "refNo": reference,
                    "shipper": {
                            "name1": name,
                            "addressStreet": street,
                            "addressHouse": house,
                        "name2": additional_info,
                        "postalCode": postal,
                        "city": city,
                        "country": "DEU",
                        "email": email,
                        "phone": phone
                    },
                    "consignee": {
                        "name1": "haveltec GmbH",
                        "addressStreet": "Friedrich-Franz-Straße",
                        "addressHouse": "19",
                        "name2": "Gebäude B EG",
                        "name3": reference,
                        "postalCode": "14770",
                        "city": "Brandenburg",
                        "country": "DEU",
                        "email": "support@ilockit.bike",
                        "phone": "+49 3381 7954008"
                    },
                    "details": {
                        "dim": {
                            "uom": "mm",
                            "height": 100,
                            "length": 200,
                            "width": 150
                        },
                        "weight": {
                            "uom": "g",
                            "value": 500
                        }
                    }
                }]
            }

            # Label generieren
            response = self.dhl_api.generate_label(shipment_data)
            
            # Sendungsnummer und Label-Daten aus der Antwort extrahieren
            shipment_no = response['shipments'][0]['shipmentNo']
            label_b64 = response['shipments'][0]['label']['b64']
            label_data = base64.b64decode(label_b64.encode('utf-8'))
            
            # PDF speichern
            filename = f"label_{shipment_no}.pdf"
            with open(filename, "wb") as file:
                file.write(label_data)
                
            # Ausgabe in GUI und Log
            self.log_text.append(f"Label wurde gespeichert als {filename}")
            self.log_text.append(f"Sendungsnummer: {shipment_no}")
            self.ref_input.setText(shipment_no)
            
            QMessageBox.information(self, "Erfolg", 
                f"Label wurde erfolgreich gespeichert als {filename}\nSendungsnummer: {shipment_no}")
                
        except Exception as e:
            QMessageBox.warning(self, "Fehler", str(e))
            self.log_text.append(f"Fehler: {str(e)}")







        #     # Label generieren
        #     labeldata = self.dhl_api.generate_label(shipmentdata)
        #     filename = f"label_{name}_{reference}.pdf"
            
        #     with open(filename, "wb") as file:
        #         file.write(labeldata)
                
        #     QMessageBox.information(self, "Erfolg", 
        #                         f"Label wurde erfolgreich gespeichert als {filename}")
        #     self.log_text.append(f"Label wurde gespeichert als {filename}")
            
        # except Exception as e:
        #     QMessageBox.warning(self, "Fehler", str(e))
        #     self.log_text.append(f"Fehler: {str(e)}")

