import sys
import time
import base64
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QLineEdit, QPushButton,
    QLabel, QFormLayout, QTextEdit, QMessageBox
)
from PyQt5.QtGui import QIcon
import requests
from io import StringIO


class LoginWindow(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.setWindowTitle("Login")
        self.setGeometry(100, 100, 400, 300)

        # Layout und Eingabefelder
        layout = QVBoxLayout(self)
        form_layout = QFormLayout()

        # Eingabefelder für Client ID, Client Secret, Username und Password (unkenntlich)
        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.client_id_input = QLineEdit()
        self.client_secret_input = QLineEdit()


        self.client_id_input.setEchoMode(QLineEdit.Password)    # Passwort-Modus aktivieren
        self.client_secret_input.setEchoMode(QLineEdit.Password)
        self.password_input.setEchoMode(QLineEdit.Password)

        form_layout.addRow("Username:", self.username_input)
        form_layout.addRow("Password:", self.password_input)
        form_layout.addRow("Client ID:", self.client_id_input)
        form_layout.addRow("Client Secret:", self.client_secret_input)

        # Login-Button
        self.login_button = QPushButton("Login")
        self.login_button.clicked.connect(self.handle_login)

        layout.addLayout(form_layout)
        layout.addWidget(self.login_button)

    def handle_login(self):
        username = self.username_input.text().strip()
        password = self.password_input.text().strip()
        client_id = self.client_id_input.text().strip()
        client_secret = self.client_secret_input.text().strip()

        if not client_id or not client_secret or not username or not password:
            QMessageBox.warning(self, "Fehler", "Bitte alle Felder ausfüllen!")
            return

        # Zugangsdaten an Hauptfenster übergeben
        self.main_window.username = username
        self.main_window.password = password
        self.main_window.client_id = client_id
        self.main_window.client_secret = client_secret


        # Login-Fenster schließen und Hauptfenster öffnen
        self.close()
        self.main_window.show()


class StreamRedirector(StringIO):
    def __init__(self, text_widget):
        super().__init__()
        self.text_widget = text_widget

    def write(self, text):
        self.text_widget.append(text)

    def flush(self):
        pass

class DHLLabelGenerator(QMainWindow):
    def __init__(self):
        super().__init__()
        self.access_token = None
        self.token_expiry = 0
        
        # DHL Credentials
        self.username = None
        self.password = None
        self.client_id = None
        self.client_secret = None
        self.billing_number = 33333333330102
        
        self.setWindowTitle("DHL Label Generator")
        self.setGeometry(100, 100, 600, 400)
        
        # Hauptwidget und Layout
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)
        
        # Formular erstellen
        form_layout = QFormLayout()
        
        # Eingabefelder
        self.name_input = QLineEdit()
        self.street_input = QLineEdit()
        self.house_input = QLineEdit()
        self.additionalInfo_input = QLineEdit()
        self.postal_input = QLineEdit()
        self.city_input = QLineEdit()
        self.email_input = QLineEdit()
        self.phone_input = QLineEdit()
        self.ref_input = QLineEdit()
        
        # Felder zum Formular hinzufügen
        form_layout.addRow("Name:", self.name_input)
        form_layout.addRow("Straße:", self.street_input)
        form_layout.addRow("Hausnummer:", self.house_input)
        form_layout.addRow("Zusatz:", self.additionalInfo_input)
        form_layout.addRow("PLZ:", self.postal_input)
        form_layout.addRow("Stadt:", self.city_input)
        form_layout.addRow("E-Mail:", self.email_input)
        form_layout.addRow("Telefon:", self.phone_input)
        form_layout.addRow("Referenz:", self.ref_input)
        
        # Generate Label Button
        self.generate_button = QPushButton("Label generieren")
        self.generate_button.clicked.connect(self.generate_label)
        
        # Log-Textfeld hinzufügen
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        
        # Layouts zusammenfügen
        layout.addLayout(form_layout)
        layout.addWidget(self.generate_button)
        layout.addWidget(self.log_text)

        # Konsolen-Widget hinzufügen
        # self.console_widget = QTextEdit()
        # self.console_widget.setReadOnly(True)
        # layout.addWidget(self.console_widget)
        
        # Stdout und Stderr umleiten
        # sys.stdout = StreamRedirector(self.console_widget)
        # sys.stderr = StreamRedirector(self.console_widget)

    def get_dhl_token(self):
        try:
            current_time = int(time.time())
            
            if self.access_token and current_time < self.token_expiry - 60:
                return self.access_token
                
            token_data = {
                "grant_type": "password",
                "username": self.username,
                "password": self.password,
                "client_id": self.client_id,
                "client_secret": self.client_secret
            }
            
            token_response = requests.post(
                "https://api-sandbox.dhl.com/parcel/de/account/auth/ropc/v1/token",
                data=token_data,
                headers={"Content-Type": "application/x-www-form-urlencoded"}
            )
            
            if token_response.status_code != 200:
                error_msg = token_response.json().get('detail', 'Token-Generierung fehlgeschlagen')
                self.log_text.append(f"Token-Fehler: {error_msg}")
                raise Exception(error_msg)
                
            token_data = token_response.json()
            if 'access_token' not in token_data:
                raise Exception("Kein access_token in der API-Antwort")
                
            self.access_token = token_data["access_token"]
            self.token_expiry = current_time + (30 * 60)
            return self.access_token
            
        except Exception as e:
            self.log_text.append(f"Token-Generierung fehlgeschlagen: {str(e)}")
            raise

    def generate_label(self):
        try:
            # Abruf der Benutzereingaben
            name = self.name_input.text().strip() or "Max Mustermann"
            street = self.street_input.text().strip() or "Hauptstr."
            house = self.house_input.text().strip() or "1"
            additional_info = self.additionalInfo_input.text().strip()
            postal = self.postal_input.text().strip() or "10115"
            city = self.city_input.text().strip() or "Berlin"
            email = self.email_input.text().strip() or "max@example.com"
            phone = self.phone_input.text().strip() or "+49 123456789"
            reference = self.ref_input.text().strip()

            # Übernahme von Adresszusatz in Referenzfeld, falls Referenzfeld leer ist
            if not reference:
                reference = additional_info
                self.ref_input.setText(reference)

            # Validierung der Referenznummer
            if reference and len(reference) < 8:
                QMessageBox.warning(self, "Fehler", "Die Referenznummer muss mindestens 8 Zeichen lang sein!")
                self.log_text.append("Fehler: Referenznummer zu kurz (min. 8 Zeichen)")
                return

            # Token holen
            access_token = self.get_dhl_token()

            # Daten für DHL API vorbereiten
            data = {
                "profile": "STANDARD_GRUPPENPROFIL",
                "shipments": [{
                    "product": "V01PAK",
                    "billingNumber": self.billing_number,
                    "refNo": reference,
                    "shipper": {
                        "name1": name,
                        "addressStreet": street,
                        "addressHouse": house,
                        "additionalAddressInformation1": additional_info,
                        "postalCode": postal,
                        "city": city,
                        "country": "DEU",
                        "email": email,
                        "phone": phone
                    },
                    "consignee": {
                        "name1": "haveltec GmbH",
                        "addressStreet": "Friedrich-Franz-Straße",
                        "addressHouse": "19",
                        "additionalAddressInformation1": "Gebäude B (EG)",
                        "postalCode": "14770",
                        "city": "Brandenburg",
                        "country": "DEU",
                        "email": "support@ilockit.bike",
                        "phone": "+49 3381 7954008"
                    },
                    "details": {
                        "dim": {"uom": "mm", "height": 100, "length": 200, "width": 150},
                        "weight": {"uom": "kg", "value": 1}
                    }
                }]
            }

            # Label generieren
            response = requests.post(
                url="https://api-sandbox.dhl.com/parcel/de/shipping/v2/orders",
                json=data,
                headers={
                    'Authorization': f'Bearer {access_token}',
                    'Content-Type': 'application/json'
                }
            )

            if response.status_code == 200:
                # Erfolgreich: Label speichern
                ref_or_additional = reference if reference else additional_info
                filename = f"label_{name}_{ref_or_additional}.pdf"
                with open(filename, 'wb') as f:
                    f.write(base64.b64decode(response.json()["items"][0]["label"]["b64"]))
                self.log_text.append(f"Label wurde gespeichert als: {filename}")
            else:
                # Fehler: Detaillierte Fehlermeldung extrahieren
                try:
                    error_msg = response.json().get('detail', 'Unbekannter Fehler beim Generieren des Labels')
                    additional_info = response.json()  # Für weitere Details
                except ValueError:  # Falls keine JSON-Antwort vorliegt
                    error_msg = f"HTTP {response.status_code}: {response.text}"
                    additional_info = None

                # Fehlermeldung im Log anzeigen
                self.log_text.append(f"Fehler: {error_msg}")
                if additional_info:
                    self.log_text.append(f"Zusätzliche Infos: {additional_info}")
                
                QMessageBox.warning(self, 'Fehler', error_msg)

        except Exception as e:
            # Allgemeine Fehlerbehandlung
            self.log_text.append(f"Fehler: {str(e)}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon('icon.png'))
    main_window = DHLLabelGenerator()
    main_window.show()
    login_window = LoginWindow(main_window)
    login_window.show()
    sys.exit(app.exec_())